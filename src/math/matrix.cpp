#include <cstdlib>
#include <stdio.h>
#include <stdlib.h>

#include "matrix.h"

//------------------------------------------------------------------------------
//                                 MATRIX3x3
//------------------------------------------------------------------------------
Bubble::Mat3::Mat3() {
    f32* ptr = (f32*)&data; 
    for (int i = 0; i < 9; i++)
        ptr[i] = 0.0; 
    ptr[0] = 1.0f;
    ptr[4] = 1.0f;
    ptr[8] = 1.0f;
}

Bubble::Mat3::Mat3(const f32* d) {
    f32* ptr = (f32*)&data;
    for (int i = 0; i < 9; i++) {
        ptr[i] = d[i];
    }
}

Bubble::Mat3::Mat3(const Vec3& v1, const Vec3& v2, const Vec3& v3) {
    data[0] = v1;
    data[1] = v2;
    data[2] = v3;
}

//Bubble::Mat3::Mat3(const Mat3& m) { 
//    for (int i = 0; i < 3; i++)
//        data[i] = m.data[i];
//}

Bubble::Mat3 Bubble::Mat3::inverse() {
    f32 invDet = this->determinante();
    if (invDet == 0.0f) {
        fprintf(stderr, "Determinant == 0\n"); \
        exit(EXIT_FAILURE);
    }
    invDet = 1.0f/invDet;
    Bubble::Mat3 res;
    res[0][0] = (data[1][1]*data[2][2] - data[2][1]*data[1][2])*invDet;
    res[0][1] = (data[0][2]*data[2][1] - data[0][1]*data[2][2])*invDet;
    res[0][2] = (data[0][1]*data[1][2] - data[0][2]*data[1][1])*invDet;
    res[1][0] = (data[1][2]*data[2][0] - data[1][0]*data[2][2])*invDet;
    res[1][1] = (data[0][0]*data[2][2] - data[0][2]*data[2][0])*invDet;
    res[1][2] = (data[1][0]*data[0][2] - data[0][0]*data[1][2])*invDet;
    res[2][0] = (data[1][0]*data[2][1] - data[2][0]*data[1][1])*invDet;
    res[2][1] = (data[2][0]*data[0][1] - data[0][0]*data[2][1])*invDet;
    res[2][2] = (data[0][0]*data[1][1] - data[1][0]*data[0][1])*invDet;
    return res;
}

//------------------------------------------------------------------------------
//                                 MATRIX4x4
//------------------------------------------------------------------------------
Bubble::Mat4::Mat4() {
    f32* ptr = (f32*)&data; 
    for (int i = 0; i < 16; i++)
        ptr[i] = 0.0; 
    ptr[0] = 1.0f;
    ptr[5] = 1.0f;
    ptr[10] = 1.0f;
    ptr[15] = 1.0f;
}

Bubble::Mat4::Mat4(const f32* d) {
    f32* ptr = (f32*)&data;
    for (int i = 0; i < 16; i++) {
        ptr[i] = d[i];
    }
}

Bubble::Mat4::Mat4(const Vec4& v1, const Vec4& v2, const Vec4& v3, const Vec4& v4) {
    data[0] = v1;
    data[1] = v2;
    data[2] = v3;
    data[3] = v4;
}

//Bubble::Mat4::Mat4(const Mat4& m) { 
//    for (int i = 0; i < 4; i++)
//        data[i] = m.data[i];
//}

f32 Bubble::Mat4::determinante() {
    f32 inv[16];
    const f32* m = (f32*)&data;

    inv[0]  =  m[5]*m[10]*m[15] - m[5]*m[11]*m[14] - m[9]*m[6]*m[15] +
               m[9]*m[7]*m[14]  + m[13]*m[6]*m[11] - m[13]*m[7]*m[10];
    inv[4]  = -m[4]*m[10]*m[15] + m[4]*m[11]*m[14] + m[8]*m[6]*m[15] -
               m[8]*m[7]*m[14]  - m[12]*m[6]*m[11] + m[12]*m[7]*m[10];
    inv[8]  =  m[4]*m[9]*m[15]  - m[4]*m[11]*m[13] - m[8]*m[5]*m[15] +
               m[8]*m[7]*m[13]  + m[12]*m[5]*m[11] - m[12]*m[7]*m[9];
    inv[12] = -m[4]*m[9]*m[14]  + m[4]*m[10]*m[13] + m[8]*m[5]*m[14] -
               m[8]*m[6]*m[13]  - m[12]*m[5]*m[10] + m[12]*m[6]*m[9];
    inv[1]  = -m[1]*m[10]*m[15] + m[1]*m[11]*m[14] + m[9]*m[2]*m[15] -
               m[9]*m[3]*m[14]  - m[13]*m[2]*m[11] + m[13]*m[3]*m[10];
    inv[5]  =  m[0]*m[10]*m[15] - m[0]*m[11]*m[14] - m[8]*m[2]*m[15] +
               m[8]*m[3]*m[14]  + m[12]*m[2]*m[11] - m[12]*m[3]*m[10];
    inv[9]  = -m[0]*m[9]*m[15]  + m[0]*m[11]*m[13] + m[8]*m[1]*m[15] -
               m[8]*m[3]*m[13]  - m[12]*m[1]*m[11] + m[12]*m[3]*m[9];
    inv[13] =  m[0]*m[9]*m[14]  - m[0]*m[10]*m[13] - m[8]*m[1]*m[14] +
               m[8]*m[2]*m[13]  + m[12]*m[1]*m[10] - m[12]*m[2]*m[9];
    inv[2]  =  m[1]*m[6]*m[15]  - m[1]*m[7]*m[14]  - m[5]*m[2]*m[15] +
               m[5]*m[3]*m[14]  + m[13]*m[2]*m[7]  - m[13]*m[3]*m[6];
    inv[6]  = -m[0]*m[6]*m[15]  + m[0]*m[7]*m[14]  + m[4]*m[2]*m[15] -
               m[4]*m[3]*m[14]  - m[12]*m[2]*m[7]  + m[12]*m[3]*m[6];
    inv[10] =  m[0]*m[5]*m[15]  - m[0]*m[7]*m[13]  - m[4]*m[1]*m[15] +
               m[4]*m[3]*m[13]  + m[12]*m[1]*m[7]  - m[12]*m[3]*m[5];
    inv[14] = -m[0]*m[5]*m[14]  + m[0]*m[6]*m[13]  + m[4]*m[1]*m[14] -
               m[4]*m[2]*m[13]  - m[12]*m[1]*m[6]  + m[12]*m[2]*m[5];
    inv[3]  = -m[1]*m[6]*m[11]  + m[1]*m[7]*m[10]  + m[5]*m[2]*m[11] -
               m[5]*m[3]*m[10]  - m[9]*m[2]*m[7]   + m[9]*m[3]*m[6];
    inv[7]  =  m[0]*m[6]*m[11]  - m[0]*m[7]*m[10]  - m[4]*m[2]*m[11] +
               m[4]*m[3]*m[10]  + m[8]*m[2]*m[7]   - m[8]*m[3]*m[6];
    inv[11] = -m[0]*m[5]*m[11]  + m[0]*m[7]*m[9]   + m[4]*m[1]*m[11] -
               m[4]*m[3]*m[9]   - m[8]*m[1]*m[7]   + m[8]*m[3]*m[5];
    inv[15] =  m[0]*m[5]*m[10]  - m[0]*m[6]*m[9]   - m[4]*m[1]*m[10] +
               m[4]*m[2]*m[9]   + m[8]*m[1]*m[6]   - m[8]*m[2]*m[5];

    return m[0]*inv[0] + m[1]*inv[4] + m[2]*inv[8] + m[3]*inv[12];
}

Bubble::Mat4 Bubble::Mat4::inverse() {
    f32 inv[16];
    const f32* m = (f32*)&data;

    inv[0]  =  m[5]*m[10]*m[15] - m[5]*m[11]*m[14] - m[9]*m[6]*m[15] +
               m[9]*m[7]*m[14]  + m[13]*m[6]*m[11] - m[13]*m[7]*m[10];
    inv[4]  = -m[4]*m[10]*m[15] + m[4]*m[11]*m[14] + m[8]*m[6]*m[15] -
               m[8]*m[7]*m[14]  - m[12]*m[6]*m[11] + m[12]*m[7]*m[10];
    inv[8]  =  m[4]*m[9]*m[15]  - m[4]*m[11]*m[13] - m[8]*m[5]*m[15] +
               m[8]*m[7]*m[13]  + m[12]*m[5]*m[11] - m[12]*m[7]*m[9];
    inv[12] = -m[4]*m[9]*m[14]  + m[4]*m[10]*m[13] + m[8]*m[5]*m[14] -
               m[8]*m[6]*m[13]  - m[12]*m[5]*m[10] + m[12]*m[6]*m[9];
    inv[1]  = -m[1]*m[10]*m[15] + m[1]*m[11]*m[14] + m[9]*m[2]*m[15] -
               m[9]*m[3]*m[14]  - m[13]*m[2]*m[11] + m[13]*m[3]*m[10];
    inv[5]  =  m[0]*m[10]*m[15] - m[0]*m[11]*m[14] - m[8]*m[2]*m[15] +
               m[8]*m[3]*m[14]  + m[12]*m[2]*m[11] - m[12]*m[3]*m[10];
    inv[9]  = -m[0]*m[9]*m[15]  + m[0]*m[11]*m[13] + m[8]*m[1]*m[15] -
               m[8]*m[3]*m[13]  - m[12]*m[1]*m[11] + m[12]*m[3]*m[9];
    inv[13] =  m[0]*m[9]*m[14]  - m[0]*m[10]*m[13] - m[8]*m[1]*m[14] +
               m[8]*m[2]*m[13]  + m[12]*m[1]*m[10] - m[12]*m[2]*m[9];
    inv[2]  =  m[1]*m[6]*m[15]  - m[1]*m[7]*m[14]  - m[5]*m[2]*m[15] +
               m[5]*m[3]*m[14]  + m[13]*m[2]*m[7]  - m[13]*m[3]*m[6];
    inv[6]  = -m[0]*m[6]*m[15]  + m[0]*m[7]*m[14]  + m[4]*m[2]*m[15] -
               m[4]*m[3]*m[14]  - m[12]*m[2]*m[7]  + m[12]*m[3]*m[6];
    inv[10] =  m[0]*m[5]*m[15]  - m[0]*m[7]*m[13]  - m[4]*m[1]*m[15] +
               m[4]*m[3]*m[13]  + m[12]*m[1]*m[7]  - m[12]*m[3]*m[5];
    inv[14] = -m[0]*m[5]*m[14]  + m[0]*m[6]*m[13]  + m[4]*m[1]*m[14] -
               m[4]*m[2]*m[13]  - m[12]*m[1]*m[6]  + m[12]*m[2]*m[5];
    inv[3]  = -m[1]*m[6]*m[11]  + m[1]*m[7]*m[10]  + m[5]*m[2]*m[11] -
               m[5]*m[3]*m[10]  - m[9]*m[2]*m[7]   + m[9]*m[3]*m[6];
    inv[7]  =  m[0]*m[6]*m[11]  - m[0]*m[7]*m[10]  - m[4]*m[2]*m[11] +
               m[4]*m[3]*m[10]  + m[8]*m[2]*m[7]   - m[8]*m[3]*m[6];
    inv[11] = -m[0]*m[5]*m[11]  + m[0]*m[7]*m[9]   + m[4]*m[1]*m[11] -
               m[4]*m[3]*m[9]   - m[8]*m[1]*m[7]   + m[8]*m[3]*m[5];
    inv[15] =  m[0]*m[5]*m[10]  - m[0]*m[6]*m[9]   - m[4]*m[1]*m[10] +
               m[4]*m[2]*m[9]   + m[8]*m[1]*m[6]   - m[8]*m[2]*m[5];

    f32 det = m[0]*inv[0] + m[1]*inv[4] + m[2]*inv[8] + m[3]*inv[12];

    if (det == 0.0f) {
        fprintf(stderr, "Determinant == 0\n"); \
        exit(EXIT_FAILURE);
    }

    det = 1.0f / det;

    for (int i = 0; i < 16; i++)
        inv[i] *= det;

    return Mat4(inv);
}